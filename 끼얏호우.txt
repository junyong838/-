# f-스트링 사용법 
지정 서식 문자:s 정수:d 실수: f 
{문자:글자 수 지정 서식}
왼쪽 정렬 {문자:글자 수s} 가운데 {정수:^글자수d} 오른쪽 {실수:>글자수f} 소수점 {실수:.소수점 수f}

1. 리스트

이름 = [ ] 형태
리스트2 = 리스트1 로 만들면 얕은 복사가 일어남
깊은 복사는 리스트2 = 리스트[ : ]의 형태로
리스트 비교연산: 첫번째로 다른 요소의 비교 

len(리스트 이름)
리스트이름.append(값) #리스트 마지막에 삽입
리스트이름.insert(위치, 값)
del 리스트이름[삭제할 요소 인덱스(위치 값)] 또는 [시작 인덱스:마지막 '다음' 인덱스] 
# [:]는 전체 삭제 = 리스트이름.clear( )
리스트이름.remove(삭제 값)

리스트.index(값) # 값이 존재하지 않으면 에러 발생
# if 값 (not) in 리스트: 의 형태로 index( ) 사용전 조건을 다는 것을 추천
리스트.count(값)

2. 튜플

이름 = ( ) 형태 # 그냥 값들의 나열을 통해서도 만들 수 있음
# 단일 요소만 갖는 경우 요소값 다음 콤마 필요
리스트와 거의 유사 단, 요소 수정은 불가능

3. 딕셔너리

이름 = {키:값} 형태
이름[요소 키] => 값이 출력 # 없는 키는 에러 발생
이름.get(요소 키) # 오류 발생시 None 출력
# 리스트와 값이 키 in 이름 의 형태로 조건문 추천

이름[추가할 키 또는 수정할 키] = 값
del 이름[삭제할 키]
이름.clear( ) # 모든 요소 삭제

이름.key/values/items/( ) 형태로 목록 불러옴

클래스

소속클래스.변수/메소드( ) 형식

정적 메소드 - 객체 생성없이 호출 가능
@staticmethod 를 위에 먼저 수식

파일 입출력

# 디렉터리 = 파일 
파일 열기
파일객체이름 = open('대상파일이름', mode='열기모드') # 없는 파일을 찾으면 에러
os.path.exists('검사할파일경로명') 으로 접근 전 경로 검사 가능 #import os 해야함
isdir( ) 는 디렉터리의 존재여부를 반환
makedirs( ) 디렉터리 생성

파일 닫기
파일객체이름.close( )

파일을 굳이 닫지 않아도 자동으로 닫는 방법
with open('파일 이름', '모드') as 파일객체이름:

텍스트 파일에 쓰기
파일객체이름.write(문자열)

open('경로명/대상파일명', mode='열기모드', encoding='문자셋')
인코딩 방식 = utf8 (권장)

파일객체이름.read( ) #텍스트 파일에서 내용을 읽어 출력
파일객체이름.readlines( ) #각 행을 리스트로 반환 ex) ['가'\n, '나'\n]
# \n 을 없애기 위해 while True: line = file.readline( ) lines.append(line.strip( )) strip 함수 사용

이진 파일
피클링 데이터를 바이트로
언피글링 반대
import pickle

pickle.dump(저장할데이터, 이진쓰기모드로 인린 파일 객체) #피클링
pickle.load(이진읽기모드로 열린 파일객체) #언피클링
